type: edu
files:
- name: src/minesweeper/Main.kt
  visible: true
  text: |
    package minesweeper

    import kotlin.random.Random

    const val MINEFIELD_SIZE = 9
    const val MINE = "X"
    const val EMPTY_SPACE = "."
    const val EMPTY_SPACE_ENCODED = 0
    const val MINE_ENCODED = 1
    val MINEFIELD = MutableList(MINEFIELD_SIZE) {
        MutableList(MINEFIELD_SIZE) { 0 }
        }
    fun main() {
        print("How many mines do you want on the field? > ")
        var numberOfMines = readln().toInt()
        addMinesRandomly(numberOfMines, MINEFIELD)
        printMinefield(MINEFIELD)
    }

    fun printMinefield(minefield: MutableList<MutableList<Int>>) {
        for (row in minefield) {
            for (column in row) {
                print(if (column == EMPTY_SPACE_ENCODED) EMPTY_SPACE else MINE)
            }
            println()
        }
    }

    fun addMinesRandomly(numberOfMines: Int, minefield: MutableList<MutableList<Int>>) {
        repeat(numberOfMines) {
            var row = Random.nextInt(0, MINEFIELD_SIZE)
            var column = Random.nextInt(0, MINEFIELD_SIZE)
            while (true) {
                if (minefield[row][column] == EMPTY_SPACE_ENCODED) {
                    minefield[row][column] = MINE_ENCODED
                    break;
                }
                row = Random.nextInt(0, MINEFIELD_SIZE)
                column = Random.nextInt(0, MINEFIELD_SIZE)
            }
        }
    }
  learner_created: false
- name: test/MinesweeperTest.java
  visible: false
  text: |
    package hstest;

    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends StageTest<Integer> {
        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                int mines = i;
                TestCase<Integer> test = new TestCase<Integer>()
                    .setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        String output = main.execute("" + mines);
                        return test(output, mines);
                    });
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        public CheckResult test(String reply, Integer attach) {
            List<String> lines =
                Arrays.stream(reply.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.wrong(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.wrong(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.wrong(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.' && !(c >= '0' && c <= '9')) {
                        return CheckResult.wrong(
                            "One of the characters is not equal to 'X' or '.' or to a number.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.wrong(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            int[] around = new int[] {-1, 0, 1};

            for (int y = 0; y < lines.size(); y++) {
                String line = lines.get(y);
                for (int x = 0; x < line.length(); x++) {
                    char c = line.charAt(x);

                    if (c == 'X') {
                        continue;
                    }

                    int minesAround = 0;

                    for (int dx : around) {
                        for (int dy : around) {

                            int newX = x + dx;
                            int newY = y + dy;

                            if (0 <= newX && newX < 9 &&
                                0 <= newY && newY < 9) {

                                char newC = lines.get(newY).charAt(newX);

                                if (newC == 'X') {
                                    minesAround++;
                                }
                            }
                        }
                    }

                    if (minesAround == 0 && c != '.') {
                        return CheckResult.wrong(
                            "There are no mines around, but found number " + c + ".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                    if (minesAround != 0 && c != '0' + minesAround) {
                        return CheckResult.wrong(
                            "In this cell should be number " + minesAround + ", " +
                                "but found symbol \"" + c + "\".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/7688#comment
status: Solved
record: 3
